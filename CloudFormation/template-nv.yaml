---
Metadata:
  AWSToolsMetrics:
    IaC_Generator: "arn:aws:cloudformation:us-east-1:114493624122:generatedTemplate/d360e8e0-7b7c-4352-b8a9-d99f6ff4340d"
Resources:
  ElasticLoadBalancingV2LoadBalancerLoadbalancerappwebserverloadbalancer37fa9548206026ae:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: "ipv4"
      SecurityGroups:
      - Ref: EC2SecurityGroup
      LoadBalancerAttributes:
      - Value: "append"
        Key: "routing.http.xff_header_processing.mode"
      - Value: "true"
        Key: "routing.http2.enabled"
      - Value: "false"
        Key: "waf.fail_open.enabled"
      - Value: "false"
        Key: "zonal_shift.config.enabled"
      - Value: "defensive"
        Key: "routing.http.desync_mitigation_mode"
      - Value: "false"
        Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
      - Value: "false"
        Key: "routing.http.preserve_host_header.enabled"
      - Value: "true"
        Key: "load_balancing.cross_zone.enabled"
      - Value: "false"
        Key: "routing.http.xff_client_port.enabled"
      - Value: "false"
        Key: "deletion_protection.enabled"
      - Value: "3600"
        Key: "client_keep_alive.seconds"
      - Value: "false"
        Key: "routing.http.drop_invalid_header_fields.enabled"
      - Value: "60"
        Key: "idle_timeout.timeout_seconds"
      Subnets:
      - Ref: "EC2SubnetEa"
      - Ref: "EC2SubnetKO"
      - Ref: "EC2SubnetMF"
      - Ref: "EC2SubnetXW"
      - Ref: "EC2Subnet"
      - Ref: "EC2SubnetF5"
      Type: "application"
      Scheme: "internet-facing"
      EnablePrefixForIpv6SourceNat: "off"
      EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ""
      Tags: []
      Name: "web-server-load-balancer-cf"
  ElasticLoadBalancingV2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: "ElasticLoadBalancingV2LoadBalancerLoadbalancerappwebserverloadbalancer37fa9548206026ae"  # Your Load Balancer name
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:114493624122:certificate/b56a48ff-0260-4a2c-9584-ff7475c02839"
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: "ElasticLoadBalancingV2TargetGroupTargetgroupec2targetbcd687d9b6099ec0"

  AutoScalingAutoScalingGroupWebserverasg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LoadBalancerNames: []
      ServiceLinkedRoleARN: "arn:aws:iam::114493624122:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
      TargetGroupARNs:
      - Ref: "ElasticLoadBalancingV2TargetGroupTargetgroupec2targetbcd687d9b6099ec0"
      Cooldown: "300"
      AvailabilityZones:
      - "us-east-1a"
      - "us-east-1b"
      - "us-east-1c"
      - "us-east-1d"
      - "us-east-1e"
      - "us-east-1f"
      AvailabilityZoneDistribution:
        CapacityDistributionStrategy: "balanced-best-effort"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 300
      MetricsCollection: []
      MaxSize: "2"
      NewInstancesProtectedFromScaleIn: false
      MinSize: "1"
      TerminationPolicies:
      - "Default"
      LaunchTemplate:
        LaunchTemplateName: web-serv-custom-image-v2
        Version: "1"
      AutoScalingGroupName: "web-server-asg-cf"
      VPCZoneIdentifier:
      - Ref: "EC2SubnetEa"
      - Ref: "EC2SubnetKO"
      - Ref: "EC2SubnetMF"
      - Ref: "EC2SubnetXW"
      - Ref: "EC2Subnet"
      - Ref: "EC2SubnetF5"
      CapacityReservationSpecification:
        CapacityReservationPreference: "default"
      Tags: []
      HealthCheckType: "ELB"

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: web-serv-custom-image-v2
      LaunchTemplateData:
        ImageId: ami-04e3618ab18a44dab
        InstanceType: t2.micro
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              Iops: 3000
              SnapshotId: snap-056bee2e720aaee77
              Throughput: 125
              VolumeSize: 8
              VolumeType: gp3
        CapacityReservationSpecification:
          CapacityReservationPreference: open
        CreditSpecification:
          CpuCredits: standard
        DisableApiStop: false
        DisableApiTermination: false
        EbsOptimized: false
        EnclaveOptions:
          Enabled: false
        MaintenanceOptions:
          AutoRecovery: default
        MetadataOptions:
          HttpEndpoint: enabled
          HttpProtocolIpv6: disabled
          HttpPutResponseHopLimit: 2
          HttpTokens: required
          InstanceMetadataTags: disabled
        Monitoring:
          Enabled: false
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - Ref: EC2SecurityGroup
            InterfaceType: interface
            NetworkCardIndex: 0
        Placement:
          Tenancy: default
        PrivateDnsNameOptions:
          EnableResourceNameDnsAAAARecord: false
          EnableResourceNameDnsARecord: true
          HostnameType: ip-name
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cloudfront-webserver

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "launch-wizard created 2025-03-07T01:58:27.064Z"
      GroupName: "current-default-vpc"
      VpcId:
        Ref: "EC2VPC"
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
        FromPort: -1
        ToPort: -1
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "tcp"
        FromPort: 22
        ToPort: 22
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "tcp"
        FromPort: 3306
        ToPort: 3306
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
      SecurityGroupEgress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
        FromPort: -1
        ToPort: -1
  ElasticLoadBalancingV2TargetGroupTargetgroupec2targetbcd687d9b6099ec0:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      IpAddressType: "ipv4"
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: "200"
      HealthCheckPath: "/"
      Port: 80
      HealthCheckEnabled: true
      ProtocolVersion: "HTTP1"
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      Name: "ec2-target-cf"
      VpcId:
        Ref: "EC2VPC"
      HealthyThresholdCount: 5
      HealthCheckProtocol: "HTTP"
      TargetGroupAttributes:
      - Value: "lb_cookie"
        Key: "stickiness.type"
      - Value: "86400"
        Key: "stickiness.app_cookie.duration_seconds"
      - Value: "1"
        Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
      - Value: "use_load_balancer_configuration"
        Key: "load_balancing.cross_zone.enabled"
      - Value: "86400"
        Key: "stickiness.lb_cookie.duration_seconds"
      - Value: "off"
        Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
      - Value: "false"
        Key: "stickiness.enabled"
      - Value: "off"
        Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
      - Value: "0"
        Key: "slow_start.duration_seconds"
      - Value: "300"
        Key: "deregistration_delay.timeout_seconds"
      - Value: "1"
        Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
      - Value: "off"
        Key: "load_balancing.algorithm.anomaly_mitigation"
      - Value: ""
        Key: "stickiness.app_cookie.cookie_name"
      - Value: "round_robin"
        Key: "load_balancing.algorithm.type"
      TargetType: "instance"
      HealthCheckPort: "traffic-port"
      Protocol: "HTTP"
      Tags: []
  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      InstanceTenancy: "default"
      EnableDnsHostnames: true
      Tags: []
  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: []
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: "EC2VPC"
      InternetGatewayId: 
        Ref: "EC2InternetGateway"
  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "EC2VPC"
  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "EC2InternetGateway"
  EC2SubnetKO:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az5"
      CidrBlock: "10.0.64.0/20"
      Tags: []
  EC2SubnetXW:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az1"
      CidrBlock: "10.0.0.0/20"
      Tags: []
  EC2SubnetMF:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az2"
      CidrBlock: "10.0.80.0/20"
      Tags: []
  EC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az3"
      CidrBlock: "10.0.48.0/20"
      Tags: []
  EC2SubnetEa:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az6"
      CidrBlock: "10.0.32.0/20"
      Tags: []
  EC2SubnetF5:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: true
      AvailabilityZoneId: "use1-az4"
      CidrBlock: "10.0.16.0/20"
      Tags: []
  SubnetRouteTableAssociationXW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2SubnetXW
      RouteTableId:
        Ref: EC2RouteTable
  SubnetRouteTableAssociationKO:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2SubnetKO
      RouteTableId:
        Ref: EC2RouteTable
  SubnetRouteTableAssociationF5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2SubnetF5
      RouteTableId:
        Ref: EC2RouteTable
  SubnetRouteTableAssociationMF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2SubnetMF
      RouteTableId:
        Ref: EC2RouteTable
  SubnetRouteTableAssociationGeneric:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2Subnet
      RouteTableId:
        Ref: EC2RouteTable
  SubnetRouteTableAssociationEa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: EC2SubnetEa
      RouteTableId:
        Ref: EC2RouteTable
  Route53AliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0095975328VA96O1F3E3
      Name: project-web-class400.online.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ElasticLoadBalancingV2LoadBalancerLoadbalancerappwebserverloadbalancer37fa9548206026ae.DNSName
        HostedZoneId: Z35SXDOTRQ7X7K
        EvaluateTargetHealth: false